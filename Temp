Authorization Flaw:
------------------
package controller.web.account;
 
public class AccountDetailsController extends HttpServlet {
    
    private static final long serialVersionUID = 1L;
 
    public void doPost(HttpServletRequest req, HttpServletResponse resp)
    throws IOException, ServletException {
   	…
	}
    
    public void doGet(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException{
   	 RequestDispatcher view = req.getRequestDispatcher("/pages/account/accounts.jsp");
   	 String id = req.getAttribute("id").toString();
   	 Account acc = AccountDAO.getAccountById(id);
   	 
   	 if(acc.getAccountId() == -1){
   		 view = req.getRequestDispatcher("/Result");
   		 req.setAttribute("result_message", "Unable to get account "+id );
   	 }else{
   		 req.setAttribute("account", acc);
   		 req.setAttribute("show_page","details");
   		 req.setAttribute("page_title","Account Details");
   		 System.out.println("AccountDetailsController  doGet Exit");
   	 }
   	 
   	 view.forward(req,resp);
    }
}

Server Side Template Injection:
------------------------------
//Thymeleaf templating engine: https://github.com/veracode-research/spring-view-manipulation

//HelloController.java

@Controller
public class HelloController {

    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("message", "happy birthday");
        return "welcome";
    }
}


// welcome.html

<!DOCTYPE HTML>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<div th:fragment="header">
    <h3>Spring Boot Web Thymeleaf Example</h3>
</div>
<div th:fragment="main">
    <span th:text="'Hello, ' + ${message}"></span>
</div>
</html>

----

Checkmarx enables organisations to fully automate SAST (Static Application Security Testing) processs. Developers are under immense pressure to deliver software rapidly so if SAST tools that disrupt development workflows are unlikely to be adopted. The development teams can benefit from SAST if it causes minimal delays and effectively identify vulnerabilities. The process needs to be tailored based on the application security strategy, existing development processes, toolchains, timelines, and personal preferences.The Checkmarx process aims to fully automate the functions from scanning to ticketing.

1. Checkmarx Workflow / Process 
    1. The Checkmarx integration with Gitlab already enables code scans for critical projects in GS. Eventually the scans will be configured as Full or Incremental based on the state of the project, whether it is a first-time scan or a code-change.
    2. The scans will be picked by the Security Analysts to perform validation so as to mark the findings - Confirmed, To Verify, Urgent, or Not Exploitable.
    3. The Confirmed Findings will be sent to an Integrated Tracker tool (Eg. JIRA, Threadfix) where they will be triaged and tracked until remediation.
    4. The process will gradually delegate the code-review responsibilities to the ASC (Application Security Champions) and the developers for their own code. This includes training and guidelines to the stakeholders.
2. Improving Security Analysis 
    1. The Secure SDLC Team and Development Teams, both will share responsibilities to add or fine-tune existing rules in Checkmarx. The S-SDLC will work on identifying common patterns for the software projects and the development teams will work on patterns specific for their projects.
    2. The S-SDLC team will also fine tune scan settings and preset configuration for better results.
3. Management and Orchestration: This feature of Checkmarx provide a holistic view of security risks across their application portfolio. It provides a centralized management console to define unified AppSec policies for custom/proprietary code and open source components, track key trends and KPIs, and drive decisions across the organization based on actionable data. Below categories are the three main capabilities of this feature:
    1. Analytics: This provides the ability to track the security status of their applications across the organization, analyze the data provided to help make better business decisions
    2. Policy Management: It provides a centralized management console to define unified AppSec policies and also define rules that serve to implement compliance, and violations. 
    3. Remediation Intelligence: focuses on remediation optimisation where it suggests “Best Fix” spots where single corrections can eliminate multiple vulnerabilities. Therefore, it is very helpful in prioritising remediation efforts that saves time and efforts. 
4. Develop code-review checklist and improve it from the learnings of scan analysis. The learnings will provide input for the security awareness training to the development team. 


Kubernetes - 2 snipetts:

# insecure-port.yaml (Insecure port enabled on the API server)
# this config file contains all config fields with comments
kind: Cluster
apiVersion: kind.sigs.k8s.io/v1alpha3
# patch the generated kubeadm config with some extra settings
kubeadmConfigPatches:
- |
  apiVersion: kubeadm.k8s.io/v1beta2
  kind: ClusterConfiguration
  metadata:
    name: config
  apiServer:
    extraArgs:
      # Don't forget quotes on the values
      insecure-bind-address: "0.0.0.0"
      insecure-port: "8080"
# 1 control plane node and 3 workers
nodes:
# the control plane node config
- role: control-plane
  extraPortMappings:
    - containerPort: 8080
      hostPort: 8080
# the three workers
- role: worker
- role: worker
- role: worker

---


#etcd-no-auth.yaml (Client authentication disabled on the ETCD server)

# this config file contains all config fields with comments
kind: Cluster
apiVersion: kind.sigs.k8s.io/v1alpha3
# patch the generated kubeadm config with some extra settings
kubeadmConfigPatches:
- |
  apiVersion: kubeadm.k8s.io/v1beta2
  kind: ClusterConfiguration
  metadata:
    name: config
  etcd:
    local:
      extraArgs:
        # Don't forget quotes on values
        client-cert-auth: "false"
# 1 control plane node and 3 workers
nodes:
# the control plane node config
- role: control-plane
# the three workers
- role: worker
- role: worker
- role: worker



Python (Remote Code Execution):

def unzip(zip_file, extraction_path):
    """
    code to unzip files
    """
    print "[INFO] Unzipping"
    try:
        files = []
        with zipfile.ZipFile(zip_file, "r") as z:
            for fileinfo in z.infolist():
                filename = fileinfo.filename
                dat = z.open(filename, "r")
                files.append(filename)
                outfile = os.path.join(extraction_path, filename)
                if not os.path.exists(os.path.dirname(outfile)):
                    try:
                        os.makedirs(os.path.dirname(outfile))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            print "\n[WARN] OS Error: Race Condition"
                if not outfile.endswith("/"):
                    with io.open(outfile, mode='wb') as f:
                        f.write(dat.read())
                dat.close()
        return files
    except Exception as e:
        print "[ERROR] Unzipping Error" + str(e)
	
	
	
Python: access control/authorization

def foo(request, user):
   assert user.is_admin, “user does not have access”
   # secure code...



